trigger:
- main

pool:
  name: 'SelfHostedPool'  # Substitua pelo nome do seu Self-hosted Agent Pool

variables:
- group: 'DockerCredentials'  # Nome do grupo de variáveis no Azure DevOps com DOCKER_USERNAME e DOCKER_PASSWORD

steps:

# Etapa 1: Debug das Variáveis
- powershell: |
    Write-Host "DOCKER_USERNAME: $(DOCKER_USERNAME)"
    $dockerToken = "$(DOCKER_PASSWORD)"
    if ($dockerToken) {
        Write-Host "DOCKER_PASSWORD length: $($dockerToken.Length)"
    } else {
        Write-Host "DOCKER_PASSWORD está vazio ou não foi resolvido."
    }
  displayName: 'Debug das Variáveis'
  env:
    DOCKER_USERNAME: $(DOCKER_USERNAME)
    DOCKER_PASSWORD: $(DOCKER_PASSWORD)

# Etapa 2: Login no Docker Hub usando PowerShell
- powershell: |
    $dockerUser = "$(DOCKER_USERNAME)"
    $dockerToken = "$(DOCKER_PASSWORD)"
    docker login -u "$(DOCKER_USERNAME)" -p "$(DOCKER_PASSWORD)"
    
  displayName: 'Login no Docker Hub usando PowerShell'
  env:
    DOCKER_USERNAME: $(DOCKER_USERNAME)
    DOCKER_PASSWORD: $(DOCKER_PASSWORD)

# Etapa 3: Build da Imagem Docker
- script: |
    docker build -t $(DOCKER_USERNAME)/unyleya_projeto:latest .
  displayName: 'Build da Imagem Docker'

# Etapa 4: Push da Imagem Docker para o Docker Hub
- script: |
    docker push $(DOCKER_USERNAME)/unyleya_projeto:latest
  displayName: 'Push da Imagem Docker para o Docker Hub'

# Etapa 5: Listar Imagens Docker para Validação
- script: |
    docker images
  displayName: 'Listar Imagens Docker Locais'
